name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Run backend tests
        env:
          MONGO_URL: mongodb://localhost:27017
          DB_NAME: test_database
        run: |
          cd backend
          python -m pytest --cov=. --cov-report=xml --cov-report=term-missing

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile
      
      - name: Run frontend tests
        run: |
          cd frontend
          yarn test:coverage
      
      - name: Build frontend
        run: |
          cd frontend
          yarn build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and start services
        run: |
          docker-compose build
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          timeout=300
          while [ $timeout -gt 0 ]; do
            if docker-compose ps | grep -q "Up (healthy)"; then
              echo "Services are healthy!"
              break
            fi
            echo "Still waiting... ($timeout seconds left)"
            sleep 10
            timeout=$((timeout-10))
          done
          
          # Show service status
          docker-compose ps
          
          # Show logs for debugging
          echo "=== Backend logs ==="
          docker-compose logs backend
          echo "=== Frontend logs ==="
          docker-compose logs frontend
      
      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile
      
      - name: Install Cypress
        run: |
          cd frontend
          yarn cypress:install
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          install: false
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          spec: cypress/e2e/**/*.cy.js
        env:
          CYPRESS_baseUrl: http://localhost:3000
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos
      
      - name: Teardown services
        if: always()
        run: |
          docker-compose logs
          docker-compose down -v