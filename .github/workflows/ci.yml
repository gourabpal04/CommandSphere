name: CommandSphere CI Pipeline - Phase 5.2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  backend-test:
    name: Backend Tests & Docker Build
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run backend tests
        env:
          MONGO_URL: mongodb://localhost:27017
          DB_NAME: test_commandsphere
        run: |
          cd backend
          python -m pytest test_server.py -v --tb=short
      
      - name: Test backend health endpoint
        env:
          MONGO_URL: mongodb://localhost:27017
          DB_NAME: test_commandsphere
        run: |
          cd backend
          uvicorn server:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/api/health
          pkill -f uvicorn

  frontend-build:
    name: Frontend Build & Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile
      
      - name: Run frontend unit tests
        run: |
          cd frontend
          yarn test:coverage
        env:
          CI: true
      
      - name: Build frontend for production
        run: |
          cd frontend
          yarn build
        env:
          REACT_APP_BACKEND_URL: http://localhost:8000
      
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  docker-build:
    name: Docker Images Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Test backend Docker build
        run: |
          echo "Building backend Docker image..."
          docker build -f backend/Dockerfile -t commandsphere-backend:ci-test .
          echo "Backend Docker build successful"
      
      - name: Test frontend Docker build
        run: |
          echo "Building frontend Docker image..."
          docker build -f frontend/Dockerfile -t commandsphere-frontend:ci-test .
          echo "Frontend Docker build successful"
      
      - name: Verify Docker images
        run: |
          docker images | grep commandsphere
          echo "Both Docker images built successfully"

  e2e-docker-tests:
    name: üöÄ E2E Tests in Docker Environment (Phase 5.2)
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create environment file
        run: |
          cp .env.example .env
          echo "Environment file created for Docker Compose"
      
      - name: Start all services with Docker Compose
        run: |
          echo "Starting CommandSphere services with Docker Compose..."
          docker-compose up -d --build
          
          echo "Services started. Checking container status..."
          docker-compose ps
      
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            echo "Waiting for backend health check..."
            while ! curl -f http://localhost:8000/api/health > /dev/null 2>&1; do
              echo "Backend not ready yet..."
              sleep 5
            done
            echo "‚úÖ Backend is healthy"
            
            echo "Waiting for frontend to be ready..."
            while ! curl -f http://localhost:3000 > /dev/null 2>&1; do
              echo "Frontend not ready yet..."
              sleep 5
            done
            echo "‚úÖ Frontend is ready"
          '
      
      - name: Verify service health
        run: |
          echo "üîç Verifying all services are healthy..."
          
          # Test backend API
          echo "Testing backend API..."
          curl -f http://localhost:8000/api/health | jq '.'
          curl -f http://localhost:8000/api/ | jq '.'
          
          # Test frontend
          echo "Testing frontend..."
          curl -f -I http://localhost:3000
          
          echo "‚úÖ All services are healthy and responding"
      
      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install Cypress and dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile
          yarn cypress:install
          echo "Cypress installation completed"
      
      - name: Run Cypress E2E Tests
        run: |
          cd frontend
          echo "üß™ Starting Cypress E2E tests..."
          yarn cypress:run --config video=true,screenshotOnRunFailure=true
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:8000/api
          CI: true
      
      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-${{ github.run_id }}
          path: frontend/cypress/screenshots/
          retention-days: 7
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos-${{ github.run_id }}
          path: frontend/cypress/videos/
          retention-days: 7
      
      - name: Show Docker logs on failure
        if: failure()
        run: |
          echo "=== DOCKER COMPOSE LOGS ==="
          docker-compose logs --tail=100
          
          echo "=== DOCKER CONTAINER STATUS ==="
          docker-compose ps
          
          echo "=== DOCKER SYSTEM INFO ==="
          docker system df
      
      - name: Cleanup Docker environment
        if: always()
        run: |
          echo "Cleaning up Docker environment..."
          docker-compose down -v --remove-orphans
          docker system prune -f

  phase-5-2-validation:
    name: ‚úÖ Phase 5.2 Validation
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build, docker-build, e2e-docker-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Phase 5.2 completion verification
        run: |
          echo "üéâ Phase 5.2: Frontend E2E Testing in Docker Environment - COMPLETED!"
          echo "=============================================================="
          echo ""
          echo "‚úÖ Components Successfully Implemented:"
          echo "  üì¶ Backend Dockerfile with health checks"
          echo "  üì¶ Frontend multi-stage Dockerfile with nginx"
          echo "  üê≥ Docker Compose orchestration"
          echo "  üß™ Comprehensive Cypress E2E test suite"
          echo "  üîÑ CI/CD pipeline with Docker integration"
          echo "  ‚úÖ Backend unit tests passing"
          echo "  ‚úÖ Frontend build successful"
          echo "  ‚úÖ Docker image builds successful"
          echo "  ‚úÖ E2E tests passing in Docker environment"
          echo ""
          echo "üöÄ CommandSphere is ready for production deployment!"
          echo "   - All services containerized and orchestrated"
          echo "   - End-to-end testing validated"
          echo "   - CI/CD pipeline fully functional"